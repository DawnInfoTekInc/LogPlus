#LogX filter mapping
#excludes list will be applied first 
#LogX filter urlmapping including list default value is /*
#logx.filter.urlmapping.includes=/*Servlet
#LogX filter urlmapping excluding list default value is 'empty'
#logx.filter.urlmapping.excludes=/*Servlet
logx.header.name=AQALogX
#the keys included must match related fields in logback.xml as well
#The fields which logX preparing the value on run time
#logx.fields=uuid,sessionId,userName,stm-logXId,stm-stepName,remoteIp,hostName
logx.fields=uuid,sessionId,userName,remoteIp,hostName,APP_ERR_CODE,APP_ERR_MSG
#the key values carried by the logx header  
#logx.header.includes=uuid,sessionId,userName,stm-logXId,stm-stepName
logx.header.includes=uuid,sessionId,userName
#
# logx custom json layout pattern definition
# 1, reserved keywords: TIMESTAMP, THREAD, LOGGER, LEVEL, MESSAGE, EXCEPTION, METHOD
# 2, fields default define basic fields which originally exist in logging framework, customized fields are extended fields which need to match with logx fields.
# 3, the format will be "field name [name=print out name] [format=special time format which originally supported by logging framework or X](additional X: X100 means string will shrink to max chars of 100), [mandatory=true/display no matter what or false/do not display if there's no value on that field]
# 4, by default, all basic (reserved keywords) fields will print out, custom fields are not mandatory
# 5, if there's no specified name, then field name will be printed out
#put the APP_ERR_CODE and APP_ERR_MSG behind the message and exception fields is recommended
logx.json.fields.default=TIMESTAMP[name=timestamp][format=yyyy-MM-dd HH:mm:ss.SSS zzz][position=first],THREAD[name=thread],LOGGER[name=logger][position=2],LEVEL[name=logLevel][position=1],MESSAGE[name=message],EXCEPTION[name=exception][position=last],METHOD[name=logMethod][position=4],checkpointForDisplay[name=performanceCheckPoint],elapsedTime,APP_ERR_CODE[name=appErrCode],APP_ERR_MSG[name=appErrMsg]
#Section of key value
# sensitive information need to hide
#cfg.aqa.header.mask=userName
logx.value.hash=userName
#the header key
#if not defined, the key same as prefix
uuid.key=uuid
#Where to find the header value in web entry
#REQUEST_HEADER is a reserved key word, means in the http request
#If request header includes multiple key:value, can be defined as: REQUEST_HEADER.currId[partOne],REQUEST_HEADER.currId[partTwo] ...   
uuid.value=REQUEST_HEADER.uuid,UUID
#Full host name
hostName.key=hostName
#Full host name
hostName.value=HOST_NAME.full
#Host name
#hostName.value=HOST_NAME
#Field value scope: 
# 1. CONTEXT : The field value is constant of the JVM parameter.
# 2. THREAD : The value same in the Thread level
# 3. LINE : The value only valid in one line of the log 
hostName.scope=CONTEXT
#
APP_ERR_CODE.value=APP_ERR_CODE
APP_ERR_CODE.scope=LINE
#Array of packages which this field will be eligible for
APP_ERR_CODE.for.packages=com.dit.tutorials
#Array of logLevels which this field will be eligible for 
APP_ERR_CODE.for.logLevel=WARN,ERROR
#Text Search Rules
#Search mode:BETWEEN, SUBSTRING
APP_ERR_CODE.com.dit.tutorials.search=BETWEEN
APP_ERR_CODE.com.dit.tutorials.start.tag=Error Code:
APP_ERR_CODE.com.dit.tutorials.end.tag=,
#**LINE_BEGIN**, **LINE_END** is the special tag means from the beginning and to end of the line 
#
APP_ERR_MSG.value=APP_ERR_CODE
APP_ERR_MSG.scope=LINE
APP_ERR_MSG.for.packages=com.dit.tutorials
APP_ERR_MSG.for.logLevel=WARN,ERROR
#
APP_ERR_MSG.com.dit.tutorials.search=BETWEEN
APP_ERR_MSG.com.dit.tutorials.start.tag=Error Message:
APP_ERR_MSG.com.dit.tutorials.end.tag=**LINE_END**
#
#Example for SUBSTRING
#APP_ERR_CODE.com.dit.tutorials.text.search=SUBSTRING
#APP_ERR_CODE.com.dit.tutorials.text.start.tag=10
#APP_ERR_CODE.com.dit.tutorials.text.end.tag=20
#
sessionId.key=sessionId
#SESSION_ID is a reserved key word, means the http sessionID
sessionId.value=SESSION_ID
#SESSION is a reserved key word, means in the http session
userName.value=SESSION.userSession.customerId
# stm use only
#stm-stepName.key=stm-stepName
#stm-logXId.value=REQUEST_HEADER.stm-logXId
#
#stm-stepName.value=REQUEST_HEADER.stm-stepName
#
# REMOTEADDR is a reserved key word, meaning  IP from http request
remoteIp.key=remoteIp
remoteIp.value=REMOTEADDR
#
# ============================================================================
#System Properties
serviceName=SafebankingUIService
applicationName=SafebankingUI
#
#=============================================================================
#Components Implementation
component.CheckPointService=com.dawninfotek.logx.checkpoint.CheckPointServiceBaseImpl
component.EventService=com.dawninfotek.logx.event.EventServiceBaseImpl
component.HashService=com.dawninfotek.logx.security.HashServiceBaseImpl
component.MaskService=com.dawninfotek.logx.security.MaskServiceBaseImpl
#============================================================================
#Resolver
resolver.HOST_NAME=com.dawninfotek.logx.resolver.impl.HostNameResolver
resolver.REQUEST_HEADER=com.dawninfotek.logx.resolver.impl.RequestHeaderResolver
resolver.REMOTEADDR=com.dawninfotek.logx.resolver.impl.RemoteAddrResolver
resolver.UUID=com.dawninfotek.logx.resolver.impl.UUIDResolver
resolver.SESSION_ID=com.dawninfotek.logx.resolver.impl.SessionIdResolver
resolver.SESSION=com.dawninfotek.logx.resolver.impl.SessionValueResolver
resolver.APP_ERR_CODE=com.dawninfotek.logx.resolver.impl.TextSearchResultResolver
resolver.APP_ERR_MSG=com.dawninfotek.logx.resolver.impl.TextSearchResultResolver
#=============================================================================
#Message Section Begin
message.event.begin=%s event %s begin
message.event.end=%s event %s end
message.performance.metric=Performance_Metric:%s, execution time:%s, transactionPath:%s 
#Message Section Begin
#=============================================================================
#Event Names
eventType.application.state.change=Application State Change
eventType.abnormal.condition=Abnormal Condition
eventType.transaction=Transaction
eventType.business=Business
eventType.service=Service
#=============================================================================
#Will use pattern matching if true, otherwise use start-with matching
path.pattern.match=false
#Section of transaction Path Mapping, the path is the 'ServletPath'
txpath.UserLogin=POST::/banking/signonForm.do
txpath.MyProfile=GET::/banking/myProfile.do
#For WebService, header value could be added as parameter, for example:
#txpath.MyProfileSrv=POST::PATH=/bankingSrv/CustomerService::REQUEST_HEADER.soapaction=http://dawninfotek.com/SoapServices/UserProfile
#
#For some applications using for data as to determine the transaction, form data name and value can be defined as:
#txpath.Transter=POST::PATH=/banking/signonForm.do::REQUST_PARAMETER.actionType=InternalAccountTransfer
#  
#=============================================================================

